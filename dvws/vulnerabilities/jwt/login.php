<!DOCTYPE html>
<html lang="en">


	<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>JSON Web Token (JWT) Secret Key Brute Force</title>

    <?php require("".dirname(__FILE__)."../../../bootstrap.php") ?>

</head>
   <body>

		 <!-- Sidebar -->
	 <div id="wrapper">

		 <div class="col-md-3">
     <?php require("".dirname(__FILE__)."../../../sidebar.php") ?>
</div>

        <!-- /#sidebar-wrapper -->

      <div id="page-content-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h1>JSON Web Token (JWT) Secret Key Brute Force</h1>
                        <p>JSON Web Token (JWT) is a JSON-based open standard (RFC 7519) for creating access tokens that assert some number of claims. For example, a server could generate a token that has the claim "logged in as admin" and provide that to a client. The client could then use that token to prove that he/she is logged in as admin. The tokens are signed by the server's key, so the server is able to verify that the token is legitimate. The tokens are designed to be compact, URL-safe and usable especially in web browser single sign-on (SSO) context.</p>

                              <h2>More Information</h2>
	<ul>
				<li><a href="http://hiderefer.com/?https://jwt.io/introduction/" target="_blank">https://jwt.io/introduction/</a></li>
		<li><a href="http://hiderefer.com/?https://www.notsosecure.com/crafting-way-json-web-tokens/" target="_blank">https://www.notsosecure.com/crafting-way-json-web-tokens/</a></li>

		</ul>
                        <p><br>The JWT standard follows the JSON Web Signature (JWS) specification to generate the final signed token. It is generated by combining the encoded JWT Header and the encoded JWT Payload, and signing it using a strong encryption algorithm, such as HMAC SHA-256. The signatureâ€™s secret key is held by the server so it will be able to verify existing tokens and sign new ones.
												<p><br>The secret signing key used to verify tokens should only be accessible by the issuer and the consumer; it should not be accessible outside of these two parties. If the secret signing key used for calculating and verifying the signature is set to a weak string, it is possible to guess or brute force these values and craft a JWT token.
													Try to log into the following application as a 'admin' user.<br></p>
       <b><form method="post" action="login_token.php">
       <input name="username" value="dvwsuser"/>
       <input name="password" value="password"/>
       <input type="submit" value="Log In">
     </form></br>


   </body>
   </html>
